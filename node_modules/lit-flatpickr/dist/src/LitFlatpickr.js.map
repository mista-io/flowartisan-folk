{"version":3,"file":"LitFlatpickr.js","sourceRoot":"","sources":["../../src/LitFlatpickr.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport 'flatpickr';\nimport { FlatpickrTheme } from './styles/Themes';\nimport StyleLoader from './StyleLoader';\nimport { DateLimit, DateOption, Hook, Options, ParsedOptions } from 'flatpickr/dist/types/options';\nimport { Locale } from 'flatpickr/dist/types/locale';\nimport { Instance } from 'flatpickr/dist/types/instance';\nimport { loadLocale } from './LocaleLoader';\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\ndeclare const flatpickr: any;\n\n@customElement('lit-flatpickr')\nexport class LitFlatpickr extends LitElement {\n    /**\n     * Placeholder text for input element provided by lit-flatpickr\n     * */\n    @property({ type: String })\n    placeholder = '';\n    /**\n     * Exactly the same as date format, but for the altInput field\n     * @prop\n     * @type string\n     **/\n    @property({ type: String })\n    altFormat = 'F j, Y';\n    /**\n     * Show the user a readable date (as per altFormat), but return something totally different to the server.\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    altInput = false;\n    /**\n     * This class will be added to the input element created by the altInput option.\n     * Note that altInput already inherits classes from the original input.\n     * @prop\n     * @type string\n     * */\n    @property({ type: String })\n    altInputClass = '';\n    /**\n     * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n     * @prop\n     * @type boolean\n     **/\n    @property({ type: Boolean })\n    allowInput = false;\n    /**\n     * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat.\n     * If you change this, you should choose a value that will make sense if a screen reader reads it out loud\n     * @prop\n     * @type string\n     **/\n    @property({ type: String })\n    ariaDateFormat = 'F j, Y';\n\n    /**\n     * Whether clicking on the input should open the picker.\n     * You could disable this if you wish to open the calendar manually with.open()\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    clickOpens = true;\n\n    /**\n     * A string of characters which are used to define how the date will be displayed in the input box.\n     * @prop\n     * @type string\n     * */\n    @property({ type: String })\n    dateFormat = 'Y-m-d';\n\n    /**\n     * Sets the initial selected date(s).\n     *\n     * If you're using mode: \"multiple\" or a range calendar supply an Array of\n     * Date objects or an Array of date strings which follow your dateFormat.\n     *\n     * Otherwise, you can supply a single Date object or a date string.\n     * @prop\n     * @type {DateOption|DateOption[]}\n     * */\n    @property({ type: Object })\n    defaultDate?: DateOption | DateOption[];\n\n    /**\n     * Initial value of the hour element.\n     * @prop\n     * @type number\n     * */\n    @property({ type: Number })\n    defaultHour = 12;\n\n    /**\n     * Initial value of the minute element.\n     * @prop\n     * @type number\n     * */\n    @property({ type: Number })\n    defaultMinute = 0;\n\n    /**\n     * Dates selected to be unavailable for selection.\n     * @prop\n     * @type DateLimit<DateOption>[]\n     * */\n    @property({ type: Array })\n    disable: DateLimit<DateOption>[] = [];\n\n    /**\n     * Set disableMobile to true to always use the non-native picker.\n     * By default, flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    disableMobile = false;\n\n    /**\n     * Dates selected to be available for selection.\n     * @prop\n     * @type DateLimit<DateOption>[]\n     * */\n    @property({ type: Array })\n    enable: DateLimit<DateOption>[] | undefined = undefined;\n\n    /**\n     * Enables time picker\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    enableTime = false;\n\n    /**\n     * Enables seconds in the time picker\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    enableSeconds = false;\n\n    /**\n     * Allows using a custom date formatting function instead of the built-in\n     * handling for date formats using dateFormat, altFormat, etc.\n     *\n     * Function format: (date: Date, format: string, locale: Locale) => string\n     *\n     * @prop\n     * @type Function\n     * */\n    @property({ type: Function })\n    formatDateFn?: (date: Date, format: string, locale: Locale) => string;\n\n    /**\n     * Adjusts the step for the hour input (incl. scrolling)\n     * @prop\n     * @type number\n     * */\n    @property({ type: Number })\n    hourIncrement = 1;\n\n    /**\n     * Adjusts the step for the minute input (incl. scrolling)\n     * @prop\n     * @type number\n     * */\n    @property({ type: Number })\n    minuteIncrement = 5;\n\n    /**\n     * Displays the calendar inline\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    inline = false;\n\n    /**\n     * The maximum date that a user can pick to (inclusive).\n     * @prop\n     * @type DateOption\n     * */\n    @property({ type: String })\n    maxDate?: DateOption;\n\n    /**\n     * The minimum date that a user can pick to (inclusive).\n     * @prop\n     * @type DateOption\n     * */\n    @property({ type: String })\n    minDate?: DateOption;\n\n    /**\n     * \"single\", \"multiple\", or \"range\"\n     * @prop\n     * @type {\"single\" | \"multiple\" | \"range\"}\n     * */\n    @property({ type: String })\n    mode: 'single' | 'multiple' | 'range' | 'time' = 'single';\n\n    /**\n     * HTML for the arrow icon, used to switch months.\n     * @prop\n     * @type string\n     * */\n    @property({ type: String })\n    nextArrow = '>';\n\n    /**\n     * HTML for the arrow icon, used to switch months.\n     * @prop\n     * @type string\n     * */\n    @property({ type: String })\n    prevArrow = '<';\n\n    /**\n     * Hides the day selection in calendar.\n     * Use it along with enableTime to create a time picker.\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    noCalendar = false;\n\n    /**\n     * Function(s) to trigger on every date selection\n     * @prop\n     * @type Function\n     * */\n    @property({ type: Function })\n    onChange?: Hook;\n\n    /**\n     * Function(s) to trigger every time the calendar is closed\n     * @prop\n     * @type Function\n     * */\n    @property({ type: Function })\n    onClose?: Hook;\n\n    /**\n     * Function(s) to trigger every time the calendar is opened\n     * @prop\n     * @type Function\n     * */\n    @property({ type: Function })\n    onOpen?: Hook;\n\n    /**\n     * Function(s) to trigger when the calendar is ready\n     * @prop\n     * @type Function\n     * */\n    @property({ type: Function })\n    onReady?: Hook;\n\n    /**\n     * Function(s) to trigger every time the calendar month is changed by the user or programmatically\n     * @prop\n     * @type Function\n     * */\n    @property({ type: Function })\n    onMonthChange?: Hook;\n\n    /**\n     * Function(s) to trigger every time the calendar year is changed by the user or programmatically\n     * @prop\n     * @type Function\n     * */\n    @property({ type: Function })\n    onYearChange?: Hook;\n\n    /**\n     * Function(s) to trigger when the input value is updated with a new date string\n     * @prop\n     * @type Function\n     * */\n    @property({ type: Function })\n    onValueUpdate?: Hook;\n\n    /**\n     * Function that expects a date string and must return a Date object.\n     *\n     * Function format: (date: string, format: string) => string\n     *\n     * @prop\n     * @type Function\n     **/\n    @property({ type: Function })\n    parseDateFn?: (date: string, format: string) => Date;\n\n    /**\n     * Where the calendar is rendered relative to the input\n     * @prop\n     * @type {\"auto\" | \"above\" | \"below\"}\n     * */\n    @property({ type: String })\n    position: 'auto' | 'above' | 'below' = 'auto';\n\n    /**\n     * Show the month using the shorthand version (ie, Sep instead of September)\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    shorthandCurrentMonth = false;\n\n    /**\n     * The number of months showed\n     * @prop\n     * @type number\n     * */\n    @property({ type: Number })\n    showMonths = 1;\n\n    /**\n     * Position the calendar inside the wrapper and next to the input element\n     * @prop\n     * @type boolean\n     **/\n    @property({ type: Boolean })\n    static = false;\n\n    /**\n     * Displays the time picker in 24 hour mode without AM/PM selection when enabled\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    time_24hr = false;\n\n    /**\n     * Enabled display of week numbers in calendar\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    weekNumbers = false;\n\n    /**\n     * flatpickr can parse an input group of textboxes and buttons, common in Bootstrap and other frameworks.\n     * This permits additional markup, as well as custom elements to trigger the state of the calendar.\n     * @prop\n     * @type boolean\n     * */\n    @property({ type: Boolean })\n    wrap = false;\n\n    /**\n     * The set theme of flatpickr.\n     * @prop\n     * @type { \"light\" | \"dark\" | \"material_blue\" | \"material_red\" | \"material_green\" | \"material_orange\" | \"airbnb\" | \"confetti\" | \"none\" }\n     * */\n    @property({ type: String })\n    theme = 'light';\n\n    @property({ type: Number })\n    firstDayOfWeek = 1;\n\n    @property({ type: String })\n    locale: string | undefined;\n\n    _instance?: Instance;\n    _inputElement?: HTMLInputElement;\n\n    @property({ type: Boolean })\n    _hasSlottedElement = false;\n\n    static get styles() {\n        return [css`\n      :host {\n        width: fit-content;\n        display: block;\n        cursor: pointer;\n        background: #fff;\n        color: #000;\n        overflow: hidden;\n      }\n\n      ::slotted(*) {\n        cursor: pointer;\n      }\n\n      input {\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        cursor: pointer;\n        background: inherit;\n        box-sizing: border-box;\n        outline: none;\n        color: inherit;\n        border: none;\n      }\n    `];\n    }\n\n    firstUpdated() {\n        this._hasSlottedElement = this.checkForSlottedElement();\n    }\n\n    updated() {\n        // TODO: Might not need to init every time updated, but only\n        // when relevant stuff changes\n        this.init();\n    }\n\n    checkForSlottedElement(): boolean {\n        const slottedElem = this.shadowRoot?.querySelector('slot');\n        // We don't want to think that a whitespace / line break is a node\n        const assignedNodes = slottedElem ? slottedElem.assignedNodes().filter(this.removeTextNodes) : [];\n\n        return slottedElem != null && assignedNodes && assignedNodes.length > 0;\n    }\n\n    getSlottedElement(): Element | undefined {\n        if (!this._hasSlottedElement) {\n            return undefined;\n        }\n        const slottedElem = this.shadowRoot?.querySelector('slot');\n        const slottedElemNodes: Array<Node> | undefined = slottedElem?.assignedNodes().filter(this.removeTextNodes);\n        if (!slottedElemNodes || slottedElemNodes.length < 1) {\n            return undefined;\n        }\n        return slottedElemNodes[0] as Element;\n    }\n\n    removeTextNodes(node: Node): boolean {\n        return node.nodeName !== '#text';\n    }\n\n    async init(): Promise<void> {\n        const styleLoader = new StyleLoader(this.theme as FlatpickrTheme);\n        await styleLoader.initStyles();\n        if (this.locale) {\n            await loadLocale(this.locale);\n        }\n        this.initializeComponent();\n    }\n\n    getOptions(): Options {\n        /* eslint-disable  @typescript-eslint/no-explicit-any */\n        const options = {\n            altFormat: this.altFormat,\n            altInput: this.altInput,\n            altInputClass: this.altInputClass,\n            allowInput: this.allowInput,\n            ariaDateFormat: this.ariaDateFormat,\n            clickOpens: this.clickOpens,\n            dateFormat: this.dateFormat,\n            defaultDate: this.defaultDate,\n            defaultHour: this.defaultHour,\n            defaultMinute: this.defaultMinute,\n            disable: this.disable,\n            disableMobile: this.disableMobile,\n            enable: this.enable,\n            enableTime: this.enableTime,\n            enableSeconds: this.enableSeconds,\n            formatDate: this.formatDateFn,\n            hourIncrement: this.hourIncrement,\n            inline: this.inline,\n            maxDate: this.maxDate,\n            minDate: this.minDate,\n            minuteIncrement: this.minuteIncrement,\n            mode: this.mode,\n            nextArrow: this.nextArrow,\n            prevArrow: this.prevArrow,\n            noCalendar: this.noCalendar,\n            onChange: this.onChange,\n            onClose: this.onClose,\n            onOpen: this.onOpen,\n            onReady: this.onReady,\n            onMonthChange: this.onMonthChange,\n            onYearChange: this.onYearChange,\n            onValueUpdate: this.onValueUpdate,\n            parseDate: this.parseDateFn,\n            position: this.position,\n            shorthandCurrentMonth: this.shorthandCurrentMonth,\n            showMonths: this.showMonths,\n            static: this.static,\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            time_24hr: this.time_24hr,\n            weekNumbers: this.weekNumbers,\n            wrap: this.wrap,\n            locale: this.locale,\n        } as any;\n        Object.keys(options).forEach(key => {\n            if (options[key] === undefined) delete options[key];\n        });\n        return options;\n    }\n\n    initializeComponent(): void {\n        if (this._instance) {\n            if (Object.prototype.hasOwnProperty.call(this, 'destroy')) {\n                this._instance.destroy();\n            }\n        }\n\n        let inputElement: HTMLInputElement | null;\n        if (this._hasSlottedElement) {\n            // If lit-flatpickr has a slotted element, it means that\n            // the user wants to use their custom input.\n            inputElement = this.findInputField();\n        } else {\n            inputElement = this.shadowRoot?.querySelector('input') as HTMLInputElement;\n        }\n\n        if (inputElement) {\n            this._inputElement = inputElement as HTMLInputElement;\n            flatpickr.l10ns.default.firstDayOfWeek = this.firstDayOfWeek;\n            this._instance = flatpickr(inputElement, this.getOptions());\n        }\n    }\n\n    findInputField(): HTMLInputElement | null {\n        let inputElement: HTMLInputElement | null = null;\n        // First we check if the slotted element is just light dom HTML\n        inputElement = this.querySelector('input');\n        if (inputElement) {\n            return inputElement as HTMLInputElement;\n        }\n        // If not, we traverse down the slotted element's dom/shadow dom until we\n        // find a dead-end or an input\n        const slottedElement: Element | undefined = this.getSlottedElement();\n        if (typeof slottedElement !== undefined) {\n            inputElement = this.searchWebComponentForInputElement(slottedElement as Element);\n        }\n\n        return inputElement ? (inputElement as HTMLInputElement) : null;\n    }\n\n    /**\n     * Traverse the shadow dom tree and search for input from it\n     * and it's children\n     * */\n    searchWebComponentForInputElement(element: Element): HTMLInputElement | null {\n        let inputElement: HTMLInputElement | null = this.getInputFieldInElement(element);\n        if (inputElement) return inputElement;\n\n        const webComponentsInChildren = this.getWebComponentsInsideElement(element);\n        for (let i = 0; i < webComponentsInChildren.length; i++) {\n            inputElement = this.searchWebComponentForInputElement(webComponentsInChildren[i]);\n            if (inputElement) {\n                break;\n            }\n        }\n        return inputElement;\n    }\n\n    /**\n     * Check if said element's dom tree contains a input element\n     * */\n    getInputFieldInElement(element: Element): HTMLInputElement | null {\n        let inputElement: HTMLInputElement | null = null;\n        if (element.shadowRoot) {\n            inputElement = element.shadowRoot.querySelector('input');\n        } else {\n            inputElement = element.querySelector('input');\n        }\n        return inputElement;\n    }\n\n    getWebComponentsInsideElement(element: Element): Array<Element> {\n        if (element.shadowRoot) {\n            return [\n                ...Array.from(element.querySelectorAll('*')),\n                ...Array.from(element.shadowRoot.querySelectorAll('*')),\n            ].filter((elem: Element) => elem.shadowRoot);\n        } else {\n            return Array.from(element.querySelectorAll('*')).filter((elem: Element) => elem.shadowRoot);\n        }\n    }\n\n    changeMonth(monthNum: number, isOffset = true): void {\n        if (!this._instance) return;\n        this._instance.changeMonth(monthNum, isOffset);\n    }\n\n    clear(): void {\n        if (!this._instance) return;\n        this._instance.clear();\n    }\n\n    close(): void {\n        if (!this._instance) return;\n        this._instance.close();\n    }\n\n    destroy(): void {\n        if (!this._instance) return;\n        this._instance.destroy();\n    }\n\n    formatDate(dateObj: Date, formatStr: string): string {\n        if (!this._instance) return '';\n        return this._instance.formatDate(dateObj, formatStr);\n    }\n\n    jumpToDate(date: Date, triggerChange: boolean) {\n        if (!this._instance) return;\n        this._instance.jumpToDate(date, triggerChange);\n    }\n\n    open(): void {\n        if (!this._instance) return;\n        this._instance.open();\n    }\n\n    parseDate(dateStr: string, dateFormat: string): Date | undefined {\n        if (!this._instance) return undefined;\n        return this._instance.parseDate(dateStr, dateFormat);\n    }\n\n    redraw(): void {\n        if (!this._instance) return;\n        this._instance.redraw();\n    }\n\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    set(\n        option:\n            | keyof Options\n            | {\n                [k in keyof Options]?: Options[k];\n            },\n        value?: any\n    ): void {\n        if (!this._instance) return;\n        this._instance.set(option, value);\n    }\n\n    setDate(date: DateOption | DateOption[], triggerChange: boolean, dateStrFormat: string): void {\n        if (!this._instance) return;\n        this._instance.setDate(date, triggerChange, dateStrFormat);\n    }\n\n    toggle(): void {\n        if (!this._instance) return;\n    }\n\n    getSelectedDates(): Array<Date> {\n        if (!this._instance) return [];\n        return this._instance.selectedDates;\n    }\n\n    getCurrentYear(): number {\n        if (!this._instance) return -1;\n        return this._instance.currentYear;\n    }\n\n    getCurrentMonth(): number {\n        if (!this._instance) return -1;\n        return this._instance.currentMonth;\n    }\n\n    getConfig(): ParsedOptions {\n        if (!this._instance) return {} as ParsedOptions;\n        return this._instance.config;\n    }\n\n    getValue(): string {\n        if (!this._inputElement) return '';\n        return this._inputElement.value;\n    }\n\n    render() {\n        return html`\n      ${!this._hasSlottedElement\n                ? html`<input class=\"lit-flatpickr flatpickr flatpickr-input\" placeholder=${this.placeholder} />`\n                : html``}\n      <slot></slot>\n    `;\n    }\n}\n"]}