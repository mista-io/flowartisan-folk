import { __decorate } from "tslib";
import { RapidElement } from './RapidElement';
import { property } from 'lit/decorators';
/**
 * FormElement is a component that appends a hidden input (outside of
 * its own shadow) with its value to be included in forms.
 */
export class FormElement extends RapidElement {
    constructor() {
        super(...arguments);
        this.hiddenInputs = [];
        this.values = [];
        this.value = '';
        this.inputRoot = this;
    }
    setValue(value) {
        if (!value) {
            this.setValues([]);
        }
        else {
            this.setValues([value]);
        }
        this.value = value;
    }
    setValues(values) {
        this.values = values;
        this.requestUpdate('values');
    }
    addValue(value) {
        this.values.push(value);
        this.requestUpdate('values');
    }
    removeValue(valueToRemove) {
        this.values = this.values.filter((value) => value !== valueToRemove);
        this.requestUpdate('values');
    }
    popValue() {
        this.values.pop();
        this.requestUpdate('values');
    }
    clear() {
        this.values = [];
        this.requestUpdate('values');
    }
    serializeValue(value) {
        return JSON.stringify(value);
    }
    updateInputs() {
        for (let ele = null; (ele = this.hiddenInputs.pop());) {
            ele.remove();
        }
        for (const value of this.values) {
            const ele = document.createElement('input');
            ele.setAttribute('type', 'hidden');
            ele.setAttribute('name', this.getAttribute('name'));
            ele.setAttribute('value', this.serializeValue(value));
            this.hiddenInputs.push(ele);
            this.inputRoot.parentElement.appendChild(ele);
        }
    }
    updated(changedProperties) {
        super.updated(changedProperties);
        // if our cursor changed, lets make sure our scrollbox is showing it
        if (changedProperties.has('values')) {
            this.updateInputs();
        }
    }
}
__decorate([
    property({ type: String, attribute: 'help_text' })
], FormElement.prototype, "helpText", void 0);
__decorate([
    property({ type: Boolean, attribute: 'help_always' })
], FormElement.prototype, "helpAlways", void 0);
__decorate([
    property({ type: Boolean, attribute: 'widget_only' })
], FormElement.prototype, "widgetOnly", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide_label' })
], FormElement.prototype, "hideLabel", void 0);
__decorate([
    property({ type: String })
], FormElement.prototype, "label", void 0);
__decorate([
    property({ type: Array })
], FormElement.prototype, "errors", void 0);
__decorate([
    property({ type: Array })
], FormElement.prototype, "values", void 0);
__decorate([
    property({ type: String })
], FormElement.prototype, "value", void 0);
__decorate([
    property({ attribute: false })
], FormElement.prototype, "inputRoot", void 0);
//# sourceMappingURL=FormElement.js.map