import { __decorate } from "tslib";
import { html, css } from 'lit';
import { property } from 'lit/decorators';
import { getUrl } from '../utils';
import '../alert/Alert';
import { CustomEventType } from '../interfaces';
import { styleMap } from 'lit-html/directives/style-map';
import { FormElement } from '../FormElement';
const QUEIT_MILLIS = 1000;
export class ContactSearch extends FormElement {
    constructor() {
        super(...arguments);
        this.placeholder = '';
        this.name = '';
        this.query = '';
        this.inactiveThreshold = 1000;
        this.inactiveDays = 90;
    }
    static get styles() {
        return css `
      :host {
        color: var(--color-text);
      }

      .urn {
        width: 120px;
      }

      .name {
        width: 160px;
      }

      .date {
        text-align: right;
      }

      .field-header {
        font-size: 80%;
        color: var(--color-text-dark);
      }

      .field-header.date {
        text-align: right;
      }

      .more {
        font-size: 90%;
        padding-top: 5px;
        padding-right: 3px;
        text-align: right;
        width: 100px;
        vertical-align: top;
      }

      table {
        width: 100%;
      }

      .contact td {
        border-bottom: 1px solid var(--color-borders);
        padding: 5px 3px;
      }

      .table-footer td {
        padding: 10px 3px;
      }

      .query-replaced,
      .count-replaced {
        display: inline-block;
        background: var(--color-primary-light);
        color: var(--color-text-dark);
        padding: 3px 6px;
        border-radius: var(--curvature);
        font-size: 85%;
        margin: 0px 3px;
      }

      temba-loading {
        margin-top: 10px;
        margin-right: 10px;
        opacity: 0;
      }

      .error {
        margin-top: 10px;
      }

      .match-count {
        padding: 4px;
        margin-top: 6px;
      }

      .linked {
        color: var(--color-link-primary);
        text-decoration: none;
        cursor: pointer;
      }

      .header td {
        border-bottom: 0px solid var(--color-borders);
        padding: 5px 3px;
      }

      .expanded .header td {
        border-bottom: 2px solid var(--color-borders);
      }

      td.field-header,
      tr.table-footer,
      tr.contact {
        display: none;
      }

      .expanded td.field-header {
        display: table-cell;
      }

      .expanded tr.contact,
      .expanded tr.table-footer {
        display: table-row;
      }

      .query {
        display: var(--contact-search-query-display);
        margin-bottom: 10px;
      }
    `;
    }
    updated(changedProperties) {
        super.updated(changedProperties);
        if (changedProperties.has('query')) {
            this.fetching = !!this.query;
            // clear our summary on any change
            this.summary = null;
            if (this.lastQuery) {
                window.clearTimeout(this.lastQuery);
            }
            if (this.query.trim().length > 0) {
                this.lastQuery = window.setTimeout(() => {
                    this.fetchSummary(this.query);
                }, QUEIT_MILLIS);
            }
        }
    }
    executeQuery(query) {
        const url = this.endpoint + query.replace('\n', ' ');
        getUrl(url).then((response) => {
            if (response.status === 200) {
                const summary = response.json;
                this.fireCustomEvent(CustomEventType.FetchComplete, summary);
            }
        });
    }
    fetchSummary(query) {
        const url = this.endpoint + query.replace('\n', ' ');
        getUrl(url).then((response) => {
            this.fetching = false;
            if (response.status === 200) {
                this.summary = response.json;
                if (this.summary.error) {
                    this.errors = [this.summary.error];
                }
                else {
                    this.errors = [];
                }
                this.requestUpdate('errors');
                this.fireCustomEvent(CustomEventType.ContentChanged, this.summary);
            }
        });
    }
    handleQueryChange(evt) {
        const input = evt.target;
        this.query = input.inputElement.value;
    }
    render() {
        let summary;
        if (this.summary) {
            const fields = Object.keys(this.summary.fields || []).map((uuid) => {
                return { uuid, ...this.summary.fields[uuid] };
            });
            if (!this.summary.error) {
                const count = this.summary.total;
                const lastSeenOn = this.summary.query.indexOf('last_seen_on') > -1;
                summary = html `
          <div class="summary ${this.expanded ? 'expanded' : ''}">
            <table cellspacing="0" cellpadding="0">
              <tr class="header">
                <td colspan="2">
                  Found
                  <a
                    class="linked"
                    target="_"
                    href="/contact/?search=${encodeURIComponent(this.summary.query)}"
                  >
                    ${count.toLocaleString()}
                  </a>
                  contact${count !== 1 ? 's' : ''}
                </td>
                ${fields.map(field => html ` <td class="field-header">${field.label}</td> `)}
                <td></td>
                <td class="field-header date">
                  ${lastSeenOn ? 'Last Seen' : 'Created'}
                </td>
              </tr>

              ${this.summary.sample.map((contact) => html `
                  <tr class="contact">
                    <td class="urn">
                      ${contact.primary_urn_formatted}
                    </td>
                    <td class="name">${contact.name}</td>
                    ${fields.map(field => html `
                        <td class="field">
                          ${(contact.fields[field.uuid] || { text: '' }).text}
                        </td>
                      `)}
                    <td></td>
                    <td class="date">
                      ${lastSeenOn
                    ? contact.last_seen_on || '--'
                    : contact.created_on}
                    </td>
                  </tr>
                `)}
              ${this.summary.total > this.summary.sample.length
                    ? html `<tr class="table-footer">
                    <td class="query-details" colspan=${fields.length + 3}></td>
                    <td class="more">
                      <a
                        class="linked"
                        target="_"
                        href="/contact/?search=${encodeURIComponent(this.summary.query)}"
                        >more</a
                      >
                    </td>
                  </tr>`
                    : null}
            </table>
          </div>
        `;
            }
        }
        const loadingStyle = this.fetching ? { opacity: '1' } : {};
        return html `
      <div class="query">
        <temba-textinput
          .label=${this.label}
          .helpText=${this.helpText}
          .widgetOnly=${this.widgetOnly}
          .errors=${this.errors}
          name=${this.name}
          .inputRoot=${this}
          @input=${this.handleQueryChange}
          placeholder=${this.placeholder}
          .value=${this.query}
          textarea
          autogrow
        >
        </temba-textinput>
      </div>

      ${this.fetching
            ? html `<temba-loading
            units="4"
            style=${styleMap(loadingStyle)}
          ></temba-loading>`
            : this.summary
                ? html ` <div class="summary">${summary}</div> `
                : null}
    `;
    }
}
__decorate([
    property({ type: Boolean })
], ContactSearch.prototype, "fetching", void 0);
__decorate([
    property({ type: Boolean })
], ContactSearch.prototype, "expanded", void 0);
__decorate([
    property({ type: String })
], ContactSearch.prototype, "endpoint", void 0);
__decorate([
    property({ type: String })
], ContactSearch.prototype, "placeholder", void 0);
__decorate([
    property({ type: String })
], ContactSearch.prototype, "name", void 0);
__decorate([
    property({ type: String })
], ContactSearch.prototype, "query", void 0);
__decorate([
    property({ type: Number })
], ContactSearch.prototype, "inactiveThreshold", void 0);
__decorate([
    property({ type: Number })
], ContactSearch.prototype, "inactiveDays", void 0);
__decorate([
    property({ attribute: false })
], ContactSearch.prototype, "summary", void 0);
//# sourceMappingURL=ContactSearch.js.map