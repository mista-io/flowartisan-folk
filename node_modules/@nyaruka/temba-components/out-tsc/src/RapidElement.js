import { LitElement } from 'lit';
export class RapidElement extends LitElement {
    constructor() {
        super(...arguments);
        this.eles = {};
    }
    getEventHandlers() {
        return [];
    }
    connectedCallback() {
        super.connectedCallback();
        for (const handler of this.getEventHandlers()) {
            if (handler.isDocument) {
                document.addEventListener(handler.event, handler.method.bind(this));
            }
            else {
                this.addEventListener(handler.event, handler.method.bind(this));
            }
        }
    }
    disconnectedCallback() {
        for (const handler of this.getEventHandlers()) {
            if (handler.isDocument) {
                document.removeEventListener(handler.event, handler.method);
            }
            else {
                this.removeEventListener(handler.event, handler.method);
            }
        }
        super.disconnectedCallback();
    }
    fireEvent(type) {
        return this.dispatchEvent(new Event(type, {
            bubbles: true,
            composed: true,
        }));
    }
    fireCustomEvent(type, detail = {}) {
        const event = new CustomEvent(type, {
            detail,
            bubbles: true,
            composed: true,
        });
        return this.dispatchEvent(event);
    }
    dispatchEvent(event) {
        super.dispatchEvent(event);
        const ele = event.target;
        if (ele) {
            // lookup events with - prefix and try to invoke them
            const eventFire = ele['-' + event.type];
            if (eventFire) {
                return eventFire(event);
            }
            else {
                const func = new Function('event', `with(document) {
          with(this) {
            let handler = ${ele.getAttribute('-' + event.type)};
            if(typeof handler === 'function') { 
              handler(event) ;
            }
          }
        }`);
                return func.call(ele, event);
            }
        }
    }
    closestElement(selector, base = this) {
        function __closestFrom(el) {
            if (!el || el === document || el === window)
                return null;
            if (el.assignedSlot)
                el = el.assignedSlot;
            const found = el.closest(selector);
            return found
                ? found
                : __closestFrom(el.getRootNode().host);
        }
        return __closestFrom(base);
    }
    getDiv(selector) {
        let ele = this.eles[selector];
        if (ele) {
            return ele;
        }
        ele = this.shadowRoot.querySelector(selector);
        if (ele) {
            this.eles[selector] = ele;
        }
        return ele;
    }
}
//# sourceMappingURL=RapidElement.js.map