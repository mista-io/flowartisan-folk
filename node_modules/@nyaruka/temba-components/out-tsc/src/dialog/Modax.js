import { __decorate } from "tslib";
import { html, css } from 'lit';
import { property } from 'lit/decorators';
import { unsafeHTML } from 'lit-html/directives/unsafe-html';
import { RapidElement } from '../RapidElement';
import { getUrl, serialize, postUrl } from '../utils';
import { CustomEventType } from '../interfaces';
export class Modax extends RapidElement {
    constructor() {
        super(...arguments);
        this.header = '';
        this.open = false;
        this.fetching = false;
        this.headers = {};
        this.body = this.getLoading();
        this.disabled = false;
        this.suspendSubmit = false;
    }
    static get styles() {
        return css `
      :host {
      }

      fieldset {
        border: none;
        margin: 0;
        padding: 0;
      }

      .control-group {
        margin-bottom: var(--control-margin-bottom);
      }

      .form-actions {
        display: none;
      }

      .modax-body {
        padding: 20px;
        display: block;
        position: relative;
        background: var(--body-bg);
      }

      .modax-body.submitting:before {
        display: inline-block;
        content: '';
        height: 100%;
        width: 100%;
        margin-left: -20px;
        margin-top: -20px;
        background: rgba(200, 200, 200, 0.1);
        position: absolute;
        z-index: 10000;
      }

      temba-dialog {
        --transition-speed: var(--transition-speed);
      }

      temba-loading {
        margin: 0 auto;
        display: block;
        width: 150px;
      }

      ul.errorlist {
        margin-top: 0px;
        list-style-type: none;
        padding-left: 0;
        padding-bottom: 7px;
      }

      ul.errorlist li {
        color: var(--color-error);
        background: rgba(255, 181, 181, 0.17);
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1),
          0 1px 2px 0 rgba(0, 0, 0, 0.06);
        color: tomato;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 6px;
        font-weight: 300;
      }
    `;
    }
    handleSlotClicked() {
        this.open = true;
    }
    updated(changes) {
        super.updated(changes);
        if (changes.has('open')) {
            if (this.open) {
                this.fetchForm();
            }
            else {
                // open can get reflected into undefined, make sure we've been open before
                if (changes.get('open') !== undefined) {
                    // hide our body after our hiding animation is done
                    window.setTimeout(() => {
                        this.body = this.getLoading();
                        this.submitting = false;
                    }, 500);
                }
            }
        }
        if (changes.has('body') && this.open && this.body && !this.fetching) {
            const dialog = this.shadowRoot.querySelector('temba-dialog');
            dialog.focusFirstInput();
        }
    }
    getLoading() {
        return html `<temba-loading units="6" size="8"></temba-loading>`;
    }
    updatePrimaryButton() {
        if (!this.noSubmit) {
            window.setTimeout(() => {
                const submitButton = this.shadowRoot.querySelector("input[type='submit']");
                if (submitButton) {
                    this.primaryName = submitButton.value;
                }
                else {
                    this.primaryName = null;
                    this.cancelName = 'Ok';
                }
                this.submitting = false;
            }, 0);
        }
    }
    setBody(body) {
        // remove any existing on our previous body
        const scriptBlock = this.shadowRoot.querySelector('.scripts');
        for (const child of scriptBlock.children) {
            child.remove();
        }
        // parse out any scripts in the body
        const div = this.ownerDocument.createElement('div');
        div.innerHTML = body;
        const scripts = div.getElementsByTagName('script');
        // IE bleeds through, avoid bootstrap form spans that breaks layout
        const spans = div.getElementsByClassName('span12');
        for (const span of spans) {
            span.className = '';
        }
        const toAdd = [];
        // now add them in
        for (let i = scripts.length - 1; i >= 0; i--) {
            // for (let i = 0; i < scripts.length; i++) {
            const script = this.ownerDocument.createElement('script');
            const code = scripts[i].innerText;
            if (scripts[i].src) {
                script.src = scripts[i].src;
                script.type = 'text/javascript';
                script.async = true;
                // TODO: track and fire event once all scripts are loaded
                // eslint-disable-next-line @typescript-eslint/no-empty-function
                script.onload = function () { };
                toAdd.push(script);
            }
            else if (code) {
                script.appendChild(this.ownerDocument.createTextNode(code));
                toAdd.push(script);
                // remove it from our current body text
            }
            scripts[i].remove();
        }
        const scriptOnly = !!div.querySelector('.success-script');
        if (!scriptOnly) {
            this.body = unsafeHTML(div.innerHTML);
        }
        window.setTimeout(() => {
            for (const script of toAdd) {
                scriptBlock.appendChild(script);
            }
        }, 0);
        return !scriptOnly;
    }
    getHeaders() {
        const headers = this.headers;
        headers['X-PJAX'] = 1;
        return headers;
    }
    fetchForm() {
        // const CancelToken = axios.CancelToken;
        // this.cancelToken = CancelToken.source();
        this.fetching = true;
        this.body = this.getLoading();
        this.httpComplete = getUrl(this.endpoint, null, this.getHeaders()).then((response) => {
            this.setBody(response.body);
            this.updatePrimaryButton();
            this.fetching = false;
            window.setTimeout(() => {
                this.fireCustomEvent(CustomEventType.Loaded, {
                    body: this.getBody(),
                });
            }, 0);
        });
    }
    submit() {
        this.submitting = true;
        const form = this.shadowRoot.querySelector('form');
        const postData = form ? serialize(form) : {};
        this.httpComplete = postUrl(this.endpoint, postData, this.getHeaders(), 'application/x-www-form-urlencoded')
            .then((response) => {
            window.setTimeout(() => {
                let redirect = response.headers.get('temba-success');
                if (!redirect &&
                    response.url &&
                    response.url.indexOf(this.endpoint) === -1) {
                    redirect = response.url;
                }
                if (redirect) {
                    if (redirect === 'hide') {
                        window.setTimeout(() => {
                            this.open = false;
                            this.fireCustomEvent(CustomEventType.Submitted);
                        }, 0);
                    }
                    else {
                        this.fireCustomEvent(CustomEventType.Redirected, {
                            url: redirect,
                        });
                        this.open = false;
                    }
                }
                else {
                    // if we set the body, update our submit button
                    if (this.setBody(response.body)) {
                        this.updatePrimaryButton();
                    }
                }
            }, 1000);
        })
            .catch(error => {
            console.error(error);
        });
    }
    handleDialogClick(evt) {
        const button = evt.detail.button;
        if (!button.disabled && !button.submitting) {
            if (button.name === this.primaryName) {
                if (!this.suspendSubmit) {
                    this.submit();
                }
            }
        }
        if (button.name === (this.cancelName || 'Cancel')) {
            this.open = false;
            this.fetching = false;
            this.cancelName = undefined;
        }
    }
    handleDialogHidden() {
        // this.cancelToken.cancel();
        this.open = false;
        this.fetching = false;
    }
    isDestructive() {
        return this.endpoint && this.endpoint.indexOf('delete') > -1;
    }
    getBody() {
        return this.shadowRoot.querySelector('.modax-body');
    }
    render() {
        return html `
      <temba-dialog
        header=${this.header}
        .primaryButtonName=${this.noSubmit ? null : this.primaryName}
        .cancelButtonName=${this.cancelName || 'Cancel'}
        ?open=${this.open}
        ?loading=${this.fetching}
        ?submitting=${this.submitting}
        ?destructive=${this.isDestructive()}
        ?noFocus=${true}
        ?disabled=${this.disabled}
        @temba-button-clicked=${this.handleDialogClick.bind(this)}
        @temba-dialog-hidden=${this.handleDialogHidden.bind(this)}
      >
        <div class="modax-body${this.submitting ? ' submitting' : ''}">
          ${this.body}
        </div>
        <div class="scripts"></div>
      </temba-dialog>
      <div class="slot-wrapper" @click=${this.handleSlotClicked}>
        <slot></slot>
      </div>
    `;
    }
}
__decorate([
    property({ type: String })
], Modax.prototype, "header", void 0);
__decorate([
    property({ type: String })
], Modax.prototype, "endpoint", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], Modax.prototype, "open", void 0);
__decorate([
    property({ type: Boolean })
], Modax.prototype, "fetching", void 0);
__decorate([
    property({ type: Boolean })
], Modax.prototype, "submitting", void 0);
__decorate([
    property({ type: String })
], Modax.prototype, "primaryName", void 0);
__decorate([
    property({ type: String })
], Modax.prototype, "cancelName", void 0);
__decorate([
    property({ type: String })
], Modax.prototype, "onLoaded", void 0);
__decorate([
    property({ type: Boolean })
], Modax.prototype, "noSubmit", void 0);
__decorate([
    property({ type: Object })
], Modax.prototype, "headers", void 0);
__decorate([
    property({ type: String })
], Modax.prototype, "body", void 0);
__decorate([
    property({ type: Boolean })
], Modax.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean })
], Modax.prototype, "suspendSubmit", void 0);
//# sourceMappingURL=Modax.js.map