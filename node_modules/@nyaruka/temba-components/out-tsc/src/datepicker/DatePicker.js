import { __decorate } from "tslib";
import { html, css } from 'lit';
import { property, customElement } from 'lit/decorators';
import { FormElement } from '../FormElement';
import 'lit-flatpickr';
let DatePicker = class DatePicker extends FormElement {
    constructor() {
        super(...arguments);
        this.placeholder = '';
        this.value = '';
        this.name = '';
    }
    static get styles() {
        return css `
      .textinput {
        padding: 9px;
        border: none;
        flex: 1;
        margin: 0;
        background: none;
        color: var(--color-widget-text);
        font-family: var(--font-family);
        font-size: 13px;
        cursor: text;
        resize: none;
        font-weight: 300;
        width: 100%;
      }

      .datepicker {
        padding: 9px;
        margin: 0px;
        border: 1px red solid;
      }

      .textinput:focus {
        outline: none;
        box-shadow: none;
        cursor: text;
      }

      .textinput::placeholder {
        color: var(--color-placeholder);
        font-weight: 300;
      }
    `;
    }
    /** we just return the value since it should be a string */
    serializeValue(value) {
        return value;
    }
    render() {
        return html `
      <lit-flatpickr
        class="textinput"
        id="my-date-picker"
        altInput
        altFormat="F j, Y"
        dateFormat="Y-m-d H:i"
        enableTime: true
      >
        <input class="textinput"></input>
      </lit-flatpickr>
    `;
    }
};
__decorate([
    property({ type: String })
], DatePicker.prototype, "placeholder", void 0);
__decorate([
    property({ type: String })
], DatePicker.prototype, "value", void 0);
__decorate([
    property({ type: String })
], DatePicker.prototype, "name", void 0);
__decorate([
    property({ type: Object })
], DatePicker.prototype, "inputElement", void 0);
DatePicker = __decorate([
    customElement('temba-datepicker')
], DatePicker);
export default DatePicker;
//# sourceMappingURL=DatePicker.js.map