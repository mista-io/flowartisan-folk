import { __decorate } from "tslib";
import { LitElement, html, css } from 'lit';
import { property, customElement } from 'lit/decorators';
import { getClasses } from '../utils';
import { styleMap } from 'lit-html/directives/style-map';
let Label = class Label extends LitElement {
    static get styles() {
        return css `
      :host {
        display: inline-block;
      }

      .mask {
        padding: 3px 6px;
        border-radius: var(--curvature);
      }

      .label.clickable .mask:hover {
        background: rgb(0, 0, 0, 0.05);
      }

      .label {
        border-radius: 2px;
        font-size: 80%;
        font-weight: 400;
        border-radius: var(--curvature);
        background: tomato;
        color: #fff;
        text-shadow: 0 0.04em 0.04em rgba(0, 0, 0, 0.35);
      }

      .primary {
        background: var(--color-label-primary);
        color: var(--color-label-primary-text);
      }

      .secondary {
        background: var(--color-label-secondary);
        color: var(--color-label-secondary-text);
        text-shadow: none;
      }

      .light {
        background: var(--color-overlay-light);
        color: var(--color-overlay-light-text);
        text-shadow: none;
      }

      .dark {
        background: var(--color-overlay-dark);
        color: var(--color-overlay-dark-text);
        text-shadow: none;
      }

      .clickable {
        cursor: pointer;
      }
    `;
    }
    render() {
        const labelStyle = this.backgroundColor && this.textColor
            ? {
                background: `${this.backgroundColor}`,
                color: `${this.textColor}`,
            }
            : {};
        return html `
      <div
        class="label ${getClasses({
            clickable: this.clickable,
            primary: this.primary,
            secondary: this.secondary,
            light: this.light,
            dark: this.dark,
        })}"
        style=${styleMap(labelStyle)}
      >
        <div class="mask">
          <slot></slot>
        </div>
      </div>
    `;
    }
};
__decorate([
    property({ type: Boolean })
], Label.prototype, "clickable", void 0);
__decorate([
    property({ type: Boolean })
], Label.prototype, "primary", void 0);
__decorate([
    property({ type: Boolean })
], Label.prototype, "secondary", void 0);
__decorate([
    property({ type: Boolean })
], Label.prototype, "light", void 0);
__decorate([
    property({ type: Boolean })
], Label.prototype, "dark", void 0);
__decorate([
    property()
], Label.prototype, "backgroundColor", void 0);
__decorate([
    property()
], Label.prototype, "textColor", void 0);
Label = __decorate([
    customElement('temba-label')
], Label);
export default Label;
//# sourceMappingURL=Label.js.map