import { __decorate } from "tslib";
import { LitElement } from 'lit';
import { property } from 'lit/decorators';
import { getUrl, getAssets } from '../utils';
export class Store extends LitElement {
    constructor() {
        super(...arguments);
        this.keyedAssets = {};
        this.fields = {};
        this.groups = {};
    }
    firstUpdated() {
        const fetches = [];
        if (this.completionEndpoint) {
            fetches.push(getUrl(this.completionEndpoint).then(response => {
                this.schema = response.json['context'];
                this.fnOptions = response.json['functions'];
            }));
        }
        if (this.fieldsEndpoint) {
            fetches.push(getAssets(this.fieldsEndpoint).then((assets) => {
                this.keyedAssets['fields'] = [];
                assets.forEach((field) => {
                    this.keyedAssets['fields'].push(field.key);
                    this.fields[field.key] = field;
                });
            }));
        }
        if (this.globalsEndpoint) {
            fetches.push(getAssets(this.globalsEndpoint).then((assets) => {
                this.keyedAssets['globals'] = assets.map((asset) => asset.key);
            }));
        }
        if (this.groupsEndpoint) {
            fetches.push(getAssets(this.groupsEndpoint).then((groups) => {
                groups.forEach((group) => {
                    this.groups[group.uuid] = group;
                });
            }));
        }
        this.httpComplete = Promise.all(fetches);
    }
    setKeyedAssets(name, values) {
        this.keyedAssets[name] = values;
    }
    updated(changedProperties) {
        super.updated(changedProperties);
    }
    getCompletionSchema() {
        return this.schema;
    }
    getFunctions() {
        return this.fnOptions;
    }
    getKeyedAssets() {
        return this.keyedAssets;
    }
    getContactField(key) {
        return this.fields[key];
    }
    isDynamicGroup(uuid) {
        const group = this.groups[uuid];
        if (group && group.query) {
            return true;
        }
        return false;
    }
}
__decorate([
    property({ type: String, attribute: 'completion' })
], Store.prototype, "completionEndpoint", void 0);
__decorate([
    property({ type: String, attribute: 'fields' })
], Store.prototype, "fieldsEndpoint", void 0);
__decorate([
    property({ type: String, attribute: 'groups' })
], Store.prototype, "groupsEndpoint", void 0);
__decorate([
    property({ type: String, attribute: 'globals' })
], Store.prototype, "globalsEndpoint", void 0);
__decorate([
    property({ type: Object, attribute: false })
], Store.prototype, "schema", void 0);
__decorate([
    property({ type: Object, attribute: false })
], Store.prototype, "fnOptions", void 0);
__decorate([
    property({ type: Object, attribute: false })
], Store.prototype, "keyedAssets", void 0);
//# sourceMappingURL=Store.js.map