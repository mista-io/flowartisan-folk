import { __decorate } from "tslib";
import { html, css } from 'lit';
import { property } from 'lit/decorators';
import { styleMap } from 'lit-html/directives/style-map';
import { RapidElement } from '../RapidElement';
var OmniType;
(function (OmniType) {
    OmniType["Group"] = "group";
    OmniType["Contact"] = "contact";
    OmniType["Urn"] = "urn";
})(OmniType || (OmniType = {}));
const postNameStyle = {
    color: 'var(--color-text-dark)',
    padding: '0px 6px',
    fontSize: '12px',
};
export class Omnibox extends RapidElement {
    constructor() {
        super(...arguments);
        this.groups = false;
        this.contacts = false;
        this.urns = false;
        this.value = [];
        this.placeholder = 'Select recipients';
        this.disabled = false;
    }
    static get styles() {
        return css `
      temba-select:focus {
        outline: none;
        box-shadow: none;
      }

      :host {
      }
    `;
    }
    /** An option in the drop down */
    renderOption(option) {
        return html `
      <div style="display:flex;">
        <div style="margin-right: 8px">${this.getIcon(option)}</div>
        <div style="flex: 1">${option.name}</div>
        <div
          style="background: rgba(50, 50, 50, 0.15); margin-left: 5px; display: flex; align-items: center; border-radius: 4px"
        >
          ${this.getPostName(option)}
        </div>
      </div>
    `;
    }
    getPostName(option) {
        const style = { ...postNameStyle };
        if (option.urn && option.type === OmniType.Contact) {
            if (option.urn !== option.name) {
                return html ` <div style=${styleMap(style)}>${option.urn}</div> `;
            }
        }
        if (option.type === OmniType.Group) {
            return html `
        <div style=${styleMap(style)}>${option.count.toLocaleString()}</div>
      `;
        }
        return null;
    }
    /** Selection in the multi-select select box */
    renderSelection(option) {
        return html `
      <div
        style="flex:1 1 auto; display: flex; align-items: stretch; color: var(--color-text-dark); font-size: 12px;"
      >
        <div style="align-self: center; padding: 0px 7px; color: #bbb">
          ${this.getIcon(option)}
        </div>
        <div
          class="name"
          style="align-self: center; padding: 0px; font-size: 12px;"
        >
          ${option.name}
        </div>
        <div
          style="background: rgba(100, 100, 100, 0.05); border-left: 1px solid rgba(100, 100, 100, 0.1); margin-left: 12px; display: flex; align-items: center"
        >
          ${this.getPostName(option)}
        </div>
      </div>
    `;
    }
    getIcon(option) {
        if (option.type === OmniType.Group) {
            return html ` <temba-icon name="users" /> `;
        }
        if (option.type === OmniType.Contact) {
            return html ` <temba-icon name="user" /> `;
        }
    }
    getEndpoint() {
        const endpoint = this.endpoint;
        let types = '&types=';
        if (this.groups) {
            types += 'g';
        }
        if (this.contacts) {
            types += 'c';
        }
        if (this.urns) {
            types += 'u';
        }
        return endpoint + types;
    }
    /** If we support urns, let them enter an arbitrary number */
    createArbitraryOption(input) {
        if (this.urns) {
            const num = parseFloat(input);
            if (!isNaN(num) && isFinite(num)) {
                return { id: 'tel:' + input, name: input, type: 'urn' };
            }
        }
    }
    getValues() {
        const select = this.shadowRoot.querySelector('temba-select');
        return select.values;
    }
    render() {
        return html `
      <temba-select
        name=${this.name}
        endpoint=${this.getEndpoint()}
        placeholder=${this.placeholder}
        queryParam="search"
        .label=${this.label}
        .helpText=${this.helpText}
        .widgetOnly=${this.widgetOnly}
        ?disabled=${this.disabled}
        .errors=${this.errors}
        .values=${this.value}
        .renderOption=${this.renderOption.bind(this)}
        .renderSelectedItem=${this.renderSelection.bind(this)}
        .createArbitraryOption=${this.createArbitraryOption.bind(this)}
        .inputRoot=${this}
        searchable
        searchOnFocus
        multi
      ></temba-select>
    `;
    }
}
__decorate([
    property()
], Omnibox.prototype, "endpoint", void 0);
__decorate([
    property()
], Omnibox.prototype, "name", void 0);
__decorate([
    property({ type: Boolean })
], Omnibox.prototype, "groups", void 0);
__decorate([
    property({ type: Boolean })
], Omnibox.prototype, "contacts", void 0);
__decorate([
    property({ type: Boolean })
], Omnibox.prototype, "urns", void 0);
__decorate([
    property({ type: Array })
], Omnibox.prototype, "value", void 0);
__decorate([
    property({ type: Array })
], Omnibox.prototype, "errors", void 0);
__decorate([
    property()
], Omnibox.prototype, "placeholder", void 0);
__decorate([
    property({ type: Boolean })
], Omnibox.prototype, "disabled", void 0);
__decorate([
    property({ type: String, attribute: 'help_text' })
], Omnibox.prototype, "helpText", void 0);
__decorate([
    property({ type: Boolean, attribute: 'help_always' })
], Omnibox.prototype, "helpAlways", void 0);
__decorate([
    property({ type: Boolean, attribute: 'widget_only' })
], Omnibox.prototype, "widgetOnly", void 0);
__decorate([
    property({ type: Boolean, attribute: 'hide_label' })
], Omnibox.prototype, "hideLabel", void 0);
__decorate([
    property({ type: String })
], Omnibox.prototype, "label", void 0);
//# sourceMappingURL=Omnibox.js.map