{"version":3,"file":"CharCount.js","sourceRoot":"","sources":["../../../src/charcount/CharCount.ts"],"names":[],"mappings":"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","sourcesContent":["import { css, html, TemplateResult } from 'lit';\nimport { RapidElement } from '../RapidElement';\nimport { splitSMS } from '../sms';\nimport { getExtendedCharacters } from './helpers';\nimport { property } from 'lit/decorators';\n\nexport class CharCount extends RapidElement {\n  static get styles() {\n    return css`\n      :host {\n        overflow: auto;\n      }\n\n      :host::after {\n        content: '';\n        clear: both;\n        display: table;\n      }\n\n      .counter {\n        float: right;\n        text-align: right;\n        position: relative;\n      }\n\n      .extended {\n        font-size: 14px;\n        display: flex;\n        margin-top: 4px;\n      }\n\n      .extended-char {\n        border: 1px solid #e6e6e6;\n        border-radius: var(--curvature-widget);\n        padding: 4px;\n        text-align: center;\n        line-height: 20px;\n        margin-right: 4px;\n      }\n\n      .summary {\n        width: 180px;\n        padding: 8px 12px;\n        font-size: 12px;\n        background: white;\n        border-radius: var(--curvature-widget);\n        overflow: hidden;\n        opacity: 0.3;\n        transform: scale(0.7);\n        box-shadow: var(--shadow);\n        transition: transform cubic-bezier(0.71, 0.18, 0.61, 1.33)\n          var(--transition-speed);\n        visibility: hidden;\n        margin-top: 5px;\n        right: 0px;\n        text-align: left;\n        position: absolute;\n        z-index: 1000;\n      }\n\n      .fine-print {\n        margin-top: 8px;\n        margin-left: -12px;\n        margin-right: -12px;\n        margin-bottom: -8px;\n        padding: 8px 12px;\n        color: #999;\n        background: #f5f5f5;\n        font-size: 10px;\n      }\n\n      .extended-warning {\n        margin-top: 8px;\n      }\n\n      .note {\n        font-weight: 600;\n        display: inline-block;\n        margin-right: 2px;\n      }\n\n      .counts {\n        cursor: pointer;\n        transition: all cubic-bezier(0.71, 0.18, 0.61, 1.33) 200ms;\n        transform: scale(0.9);\n        display: inline-block;\n        padding: 2px 6px;\n        border-radius: var(--curvature);\n        margin-top: 4px;\n      }\n\n      .segments {\n        font-size: 85%;\n        display: inline-block;\n      }\n\n      .attention .counts {\n        transform: scale(0.95);\n        background: var(--color-overlay-light);\n        color: var(--color-overlay-light-text);\n      }\n\n      .attention .segments {\n        font-weight: 600;\n      }\n\n      .counter:hover .summary {\n        opacity: 1;\n        transform: scale(1);\n        visibility: visible;\n      }\n    `;\n  }\n\n  @property({ type: String })\n  text: string;\n\n  @property({ type: Number })\n  count: number;\n\n  @property({ type: Number, attribute: false })\n  segments: number;\n\n  @property({ type: Object, attribute: false })\n  extended: string[] = [];\n\n  public updated(changes: Map<string, any>) {\n    super.updated(changes);\n    if (changes.has('text')) {\n      this.updateSegments();\n    }\n  }\n\n  private updateSegments() {\n    const sms = splitSMS(this.text);\n    this.count = sms.length;\n    this.segments = sms.parts.length;\n    this.extended = getExtendedCharacters(this.text);\n    this.count = this.text.length;\n  }\n\n  public render(): TemplateResult {\n    const hasExpressions = this.text && this.text.indexOf('@') > -1;\n\n    let segments = html`.`;\n    if (this.segments > 1) {\n      segments = html`and will use ${hasExpressions ? html`at least` : null}\n        <b>${this.segments} messages</b> to send over SMS.`;\n    } else {\n      segments = html`and will use ${hasExpressions ? html`at least` : null} one\n      message to send over SMS.`;\n    }\n\n    let extended = null;\n    if (this.extended.length > 0 && (this.segments > 1 || hasExpressions)) {\n      extended = this.extended.map(\n        (ch: string) => html`<div class=\"extended-char\">${ch}</div>`\n      );\n      extended = html`\n        <div class=\"extended-warning\">\n          Some characters require more space over SMS. To save on fees, consider\n          replacing them.\n          <div class=\"extended\">${extended}</div>\n        </div>\n      `;\n    }\n\n    const summary =\n      this.count > 1\n        ? html` <div class=\"summary\">\n            This message is <b>${this.count} characters</b>\n            ${segments} ${extended}\n            ${hasExpressions\n              ? html`\n                  <div class=\"fine-print\">\n                    <div class=\"note\">NOTE</div>\n                    Using variables may result in more messages when sending\n                    over SMS than this estimate.\n                  </div>\n                `\n              : null}\n          </div>`\n        : null;\n\n    return html`<div class=\"counter${\n      extended ? ' attention' : ''\n    }\"><div class=\"counts\">${this.count}${\n      this.segments > 1 || hasExpressions\n        ? html`<div class=\"segments\">\n            &nbsp;/&nbsp;${this.segments}${hasExpressions ? html`+` : null}\n            <div></div>\n          </div>`\n        : null\n    }</div> ${summary}</div></div>`;\n  }\n}\n"]}