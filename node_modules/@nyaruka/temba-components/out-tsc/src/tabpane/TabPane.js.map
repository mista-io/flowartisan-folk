{"version":3,"file":"TabPane.js","sourceRoot":"","sources":["../../../src/tabpane/TabPane.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAkB,MAAM,KAAK,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAG/C,MAAM,OAAO,OAAQ,SAAQ,YAAY;IAAzC;;QAsDE,UAAK,GAAG,CAAC,CAAC;IAqDZ,CAAC;IA1GC,MAAM,KAAK,MAAM;QACf,OAAO,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgDT,CAAC;IACJ,CAAC;IAKO,cAAc,CAAC,KAAiB;QACtC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAClB,KAAK,CAAC,aAAgC,CAAC,OAAO,CAAC,KAAK,CACtD,CAAC;QACF,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAEM,OAAO,CAAC,iBAAmC;QAChD,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACjC,IAAI,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YAClC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE;gBACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC7C,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAQ,CAAC;oBACpC,GAAG,CAAC,QAAQ,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC;oBAE/B,IAAI,GAAG,CAAC,QAAQ,EAAE;wBAChB,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;qBAC5B;yBAAM;wBACL,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;qBAC5B;iBACF;aACF;SACF;IACH,CAAC;IAEM,MAAM;QACX,MAAM,IAAI,GAAU,EAAE,CAAC;QACvB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE;YAC/B,IAAI,CAAC,IAAI,CAAC,GAAU,CAAC,CAAC;SACvB;QAED,OAAO,IAAI,CAAA;;UAEL,IAAI,CAAC,GAAG,CACR,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,CAAA;;uBAEP,IAAI,CAAC,cAAc;2BACf,KAAK;2BACL,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;;gBAEhD,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA,oBAAoB,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI;gBACvD,GAAG,CAAC,IAAI;;WAEb,CACF;;yBAEgB,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;;;KAGrD,CAAC;IACJ,CAAC;CACF;AArDC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;sCACjB","sourcesContent":["import { css, html, TemplateResult } from 'lit';\nimport { property } from 'lit/decorators';\nimport { RapidElement } from '../RapidElement';\nimport { Tab } from './Tab';\n\nexport class TabPane extends RapidElement {\n  static get styles() {\n    return css`\n      :host {\n        display: flex;\n        flex-direction: column;\n        min-height: 0;\n      }\n\n      .tabs {\n        display: flex;\n      }\n\n      .tab {\n        padding: 0.5em 1em;\n        margin: 0em 0em;\n        cursor: pointer;\n        display: flex;\n        border-radius: var(--curvature);\n        border-bottom-right-radius: 0px;\n        border-bottom-left-radius: 0px;\n        border: 0px solid rgba(0, 0, 0, 0.45);\n        color: var(--color-text-dark);\n        --icon-color: var(--color-text-dark);\n      }\n\n      .tab temba-icon {\n        margin-right: 0.4em;\n      }\n\n      .tab.selected {\n        cursor: default;\n        box-shadow: 2px 1px 3px 2px rgba(0, 0, 0, 0.07);\n        background: #fff;\n      }\n\n      .pane {\n        display: flex;\n        flex-direction: column;\n        flex-grow: 1;\n        background: #fff;\n        border-radius: var(--curvature);\n        box-shadow: 2px 5px 12px 2px rgba(0, 0, 0, 0.09),\n          3px 3px 2px 1px rgba(0, 0, 0, 0.05);\n        min-height: 0;\n      }\n\n      .pane.first {\n        border-top-left-radius: 0px;\n      }\n    `;\n  }\n\n  @property({ type: Number })\n  index = 0;\n\n  private handleTabClick(event: MouseEvent): void {\n    this.index = parseInt(\n      (event.currentTarget as HTMLDivElement).dataset.index\n    );\n    this.requestUpdate('index');\n  }\n\n  public updated(changedProperties: Map<string, any>) {\n    super.updated(changedProperties);\n    if (changedProperties.has('index')) {\n      if (this.children.length > this.index) {\n        for (let i = 0; i < this.children.length; i++) {\n          const tab = this.children[i] as Tab;\n          tab.selected = i == this.index;\n\n          if (tab.selected) {\n            tab.style.display = 'flex';\n          } else {\n            tab.style.display = 'none';\n          }\n        }\n      }\n    }\n  }\n\n  public render(): TemplateResult {\n    const tabs: Tab[] = [];\n    for (const tab of this.children) {\n      tabs.push(tab as Tab);\n    }\n\n    return html`\n      <div class=\"tabs\">\n        ${tabs.map(\n          (tab, index) => html`\n            <div\n              @click=${this.handleTabClick}\n              data-index=${index}\n              class=\"tab ${index == this.index ? 'selected' : ''}\"\n            >\n              ${tab.icon ? html`<temba-icon name=${tab.icon} />` : null}\n              ${tab.name}\n            </div>\n          `\n        )}\n      </div>\n      <div class=\"pane ${this.index === 0 ? 'first' : null}\">\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n"]}