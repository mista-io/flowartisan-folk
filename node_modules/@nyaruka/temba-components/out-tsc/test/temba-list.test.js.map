{"version":3,"file":"temba-list.test.js","sourceRoot":"","sources":["../../test/temba-list.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert, expect } from '@open-wc/testing';\nimport sinon from 'sinon';\nimport { TembaList } from '../src/list/TembaList';\nimport { assertScreenshot, getClip, getComponent } from './utils.test';\n\nconst TAG = 'temba-list';\nconst getList = async (attrs: any = {}) => {\n  const list = (await getComponent(TAG, attrs)) as TembaList;\n\n  // wait for the fetch\n  await list.httpComplete;\n\n  return list;\n};\n\ndescribe('temba-list', () => {\n  it('can be created', async () => {\n    const list: TembaList = await getList();\n    assert.instanceOf(list, TembaList);\n    expect(list.items.length).to.equal(0);\n  });\n\n  it('shows empty list with bad endpoint', async () => {\n    const list: TembaList = await getList({ endpoint: 'expected-404.json' });\n    expect(list.items.length).to.equal(0);\n  });\n\n  it('renders with endpoint', async () => {\n    const list: TembaList = await getList({\n      endpoint: '/test-assets/list/temba-list.json',\n    });\n    expect(list.items.length).to.equal(4);\n    await assertScreenshot('list/items', getClip(list));\n  });\n\n  it('fires change event on cursor change', async () => {\n    const list: TembaList = await getList({\n      endpoint: '/test-assets/list/temba-list.json',\n    });\n\n    const changeEvent = sinon.spy();\n\n    list.addEventListener('change', changeEvent);\n    list.cursorIndex = 1;\n\n    // let our event fire\n    await waitFor(0);\n\n    assert(changeEvent.called, 'change event not fired');\n    await assertScreenshot('list/items-selected', getClip(list));\n  });\n\n  it('fires change when first element changes after fetch', async () => {\n    const list: TembaList = await getList({\n      endpoint: '/test-assets/list/temba-list.json',\n    });\n\n    // spy on change event\n    const changeEvent = sinon.spy();\n    list.addEventListener('change', changeEvent);\n\n    // don't let our list reset on endpoint change\n    list.preserve = true;\n    list.endpoint = '/test-assets/list/temba-list-shorter.json';\n\n    // refresh our endpoint and wait for event to fire\n    await waitFor(0);\n    await list.httpComplete;\n\n    assert(changeEvent.called, 'change event not fired');\n    await assertScreenshot('list/items-updated', getClip(list));\n  });\n});\n"]}