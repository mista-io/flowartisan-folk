{"version":3,"file":"temba-modax.test.js","sourceRoot":"","sources":["../../test/temba-modax.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { fixture, expect, assert } from '@open-wc/testing';\nimport { Button } from '../src/button/Button';\nimport { Modax } from '../src/dialog/Modax';\nimport { useFakeTimers } from 'sinon';\nimport { assertScreenshot, checkTimers, getClip, mockPOST } from './utils.test';\n\nlet clock: any;\n\nconst getModaxHTML = (endpoint: string): string => {\n  return `\n      <temba-modax header=\"Hello Modax\" endpoint=\"${endpoint}\">\n        <div>Open Me</div>\n      </temba-modax>\n    `;\n};\n\nconst getButtons = (modax: Modax, type: string = null) => {\n  return modax.shadowRoot\n    .querySelector('temba-dialog')\n    .shadowRoot.querySelectorAll(\n      type ? `temba-button[${type}='']` : 'temba-button'\n    );\n};\n\nconst open = async (modax: Modax) => {\n  modax.open = true;\n  await modax.updateComplete;\n  await modax.httpComplete;\n  await clock.tick(400);\n};\n\nconst clickPrimary = async (modax: Modax) => {\n  const buttons = getButtons(modax);\n\n  if (buttons.length > 0) {\n    let primary = buttons[0] as Button;\n\n    if (buttons.length > 1) {\n      // look for our primary flag\n      buttons.forEach((button: Button) => {\n        if (button.primary) {\n          primary = button;\n        }\n      });\n    }\n\n    expect(primary).not.equals(undefined, 'Missing primary button');\n    primary.click();\n    await clock.tick(500);\n    await clock.tick(100);\n    await waitFor(0);\n    await clock.tick(1000);\n  }\n};\n\nconst getDialogClip = (modax: Modax) => {\n  const dialog = modax.shadowRoot.querySelector('temba-dialog');\n\n  return getClip(\n    dialog.shadowRoot.querySelector('.dialog-container') as HTMLElement\n  );\n};\n\ndescribe('temba-modax', () => {\n  beforeEach(function () {\n    clock = useFakeTimers();\n  });\n\n  afterEach(function () {\n    clock.restore();\n  });\n\n  it('can be created', async () => {\n    const modax: Modax = await fixture(\n      getModaxHTML('/test-assets/modax/hello.html')\n    );\n    assert.instanceOf(modax, Modax);\n  });\n\n  it('opens', async () => {\n    const modax: Modax = await fixture(\n      getModaxHTML('/test-assets/modax/hello.html')\n    );\n\n    await click('temba-modax');\n    expect(modax.open).equals(true);\n    await modax.httpComplete;\n    await clock.tick(400);\n    checkTimers(clock);\n\n    // Now our body should have our endpoint text\n    expect(modax.getBody().innerHTML).to.contain('Hello World');\n    await assertScreenshot('modax/simple', getDialogClip(modax));\n  });\n\n  it('fetches forms', async () => {\n    const modax: Modax = await fixture(\n      getModaxHTML('/test-assets/modax/form.html')\n    );\n    expect(modax.open).to.equal(false);\n    await open(modax);\n\n    expect(modax.open).to.equal(true);\n    await assertScreenshot('modax/form', getDialogClip(modax));\n  });\n\n  it('reverts primary name on reuse', async () => {\n    const modax: Modax = await fixture(\n      getModaxHTML('/test-assets/modax/hello.html')\n    );\n\n    // await click('temba-modax');\n    await open(modax);\n    expect(modax.open).equals(true);\n\n    // should only have one button, okay\n    let buttons = getButtons(modax);\n    expect(buttons.length).equals(1);\n\n    // close our dialog\n    await clickPrimary(modax);\n    expect(modax.open).equals(false);\n\n    // now fetch form from the same modax\n    modax.endpoint = '/test-assets/modax/form.html';\n    await modax.updateComplete;\n    await modax.httpComplete;\n    await clock.tick(400);\n\n    await open(modax);\n    expect(modax.open).equals(true);\n    await modax.httpComplete;\n    await clock.tick(400);\n    await waitFor(100);\n\n    // now we should have two buttons, 'Save Everything' and 'Cancel'\n    buttons = getButtons(modax);\n    expect(buttons.length).equals(2);\n\n    // secondary should be Cancel, not Ok\n    const secondary = getButtons(modax, 'secondary')[0] as Button;\n    expect(secondary.name).equals('Cancel');\n  });\n\n  it('closes after redirect', async () => {\n    const modax: Modax = await fixture(\n      getModaxHTML('/test-assets/modax/form.html')\n    );\n\n    await open(modax);\n    const primary = getButtons(modax, 'primary')[0] as Button;\n    expect(primary.name).equals('Save Everything');\n\n    // click the submit button\n    mockPOST(/\\/test-assets\\/modax\\/form\\.html/, '', {\n      'Temba-Success': '/newpage',\n    });\n    await clickPrimary(modax);\n\n    // our modal should go away as we redirect\n    expect(modax.open).equals(false, 'Modal still visible');\n  });\n});\n"]}