{"version":3,"file":"temba-textinput.test.js","sourceRoot":"","sources":["../../test/temba-textinput.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { fixture, expect, assert } from '@open-wc/testing';\nimport { TextInput } from '../src/textinput/TextInput';\nimport { assertScreenshot, getAttributes, getClip } from './utils.test';\n\nexport const getInputHTML = (attrs: any = { value: 'hello world' }) => {\n  return `<temba-textinput ${getAttributes(attrs)}></temba-textinput>`;\n};\n\nexport const createInput = async (def: string) => {\n  const parentNode = document.createElement('div');\n  parentNode.setAttribute('style', 'width: 250px;');\n  const input: TextInput = await fixture(def, { parentNode });\n  return input;\n};\n\ndescribe('temba-textinput', () => {\n  it('can be created', async () => {\n    const input: TextInput = await createInput(getInputHTML());\n    assert.instanceOf(input, TextInput);\n    await assertScreenshot('textinput/input', getClip(input));\n  });\n\n  it('shows placeholder', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({ placeholder: 'Enter some text' })\n    );\n\n    const widget = input.shadowRoot.querySelector(\n      '.textinput'\n    ) as HTMLInputElement;\n\n    expect(widget.placeholder).to.equal('Enter some text');\n    await assertScreenshot('textinput/input-placeholder', getClip(input));\n  });\n\n  it('should focus inputs on click', async () => {\n    const input: TextInput = await createInput(getInputHTML());\n    await click('temba-textinput');\n    await assertScreenshot('textinput/input-focused', getClip(input));\n  });\n\n  it('should render textarea', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({ value: 'hello world', textarea: true })\n    );\n    assert.instanceOf(input, TextInput);\n    await assertScreenshot('textinput/textarea', getClip(input));\n  });\n\n  it('should focus textarea on click', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({ value: 'hello world', textarea: true })\n    );\n    await click('temba-textinput');\n    await assertScreenshot('textinput/textarea-focused', getClip(input));\n  });\n\n  it('takes internal input changes', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({ value: 'hello world' })\n    );\n\n    // trigger a change on our internal widget\n    const widget = input.shadowRoot.querySelector(\n      '.textinput'\n    ) as HTMLInputElement;\n    expect(widget.tagName).to.equal('INPUT');\n    expect(widget.disabled).to.equal(false);\n\n    // focus our widget, move back a few spots and insert some text\n    await click('temba-textinput');\n    await pressKey('ArrowLeft', 5);\n    await type('to the ');\n\n    // should be reflected on our main input\n    expect(input.value).to.equal('hello to the world');\n  });\n\n  it('does not take internal input changes for disabled', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({ value: 'hello world', disabled: true })\n    );\n\n    // trigger a change on our internal widget\n    const widget = input.shadowRoot.querySelector(\n      '.textinput'\n    ) as HTMLInputElement;\n    expect(widget.tagName).to.equal('INPUT');\n    expect(widget.disabled).to.equal(true);\n\n    // focus our widget, move back a few spots and insert some text\n    await click('temba-textinput');\n    await pressKey('ArrowLeft', 5);\n    await type('to the ');\n\n    // should be reflected on our main input\n    expect(input.value).to.equal('hello world');\n    await assertScreenshot('textinput/input-disabled', getClip(input));\n  });\n\n  it('takes internal textarea changes', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({ value: 'hello world', textarea: true })\n    );\n\n    // trigger a change on our internal widget\n    const widget = input.shadowRoot.querySelector(\n      '.textinput'\n    ) as HTMLInputElement;\n    expect(widget.tagName).to.equal('TEXTAREA');\n    expect(widget.disabled).to.equal(false);\n\n    // focus our widget, move back a few spots and insert some text\n    await click('temba-textinput');\n    await pressKey('ArrowLeft', 5);\n    await type('to the ');\n\n    // should be reflected on our main input\n    expect(input.value).to.equal('hello to the world');\n  });\n\n  it('does not take internal textarea changes for disabled', async () => {\n    const input: TextInput = await fixture(\n      getInputHTML({ value: 'hello world', textarea: true, disabled: true })\n    );\n\n    // trigger a change on our internal widget\n    const widget = input.shadowRoot.querySelector(\n      '.textinput'\n    ) as HTMLInputElement;\n    expect(widget.tagName).to.equal('TEXTAREA');\n    expect(widget.disabled).to.equal(true);\n\n    // focus our widget, move back a few spots and insert some text\n    await click('temba-textinput');\n    await pressKey('ArrowLeft', 5);\n    await type('to the ');\n\n    // should be reflected on our main input\n    expect(input.value).to.equal('hello world');\n  });\n\n  it(\"doesn't advance cursor on GSM character replacement\", async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({ value: 'hello world', textarea: true, gsm: true })\n    );\n    input.value = 'Let’s try some text with a funny tick.';\n\n    // focus our widget, move back a few spots and insert some text\n    await click('temba-textinput');\n    await pressKey('ArrowLeft', 5);\n    await type('replaced ');\n\n    expect(input.value).to.equal(\n      \"Let's try some text with a funny replaced tick.\"\n    );\n  });\n\n  it(\"doesn't move cursor to the end on insert in input\", async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({ value: 'hello world' })\n    );\n\n    // focus our widget, move back a few spots and insert some text\n    await click('temba-textinput');\n    await pressKey('ArrowLeft', 5);\n    await type('sad, sad ');\n\n    expect(input.value).to.equal('hello sad, sad world');\n    await assertScreenshot('textinput/input-inserted', getClip(input));\n  });\n\n  it('shows form attributes', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({\n        name: 'message',\n        value: 'hello world',\n        label: 'Your Message',\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        help_text: 'Enter your message here',\n      })\n    );\n    await assertScreenshot('textinput/input-form', getClip(input));\n  });\n\n  it('updates input value', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({\n        value: 'hello world',\n      })\n    );\n\n    input.value = 'Updated by attribute change';\n    const widget = input.shadowRoot.querySelector(\n      '.textinput'\n    ) as HTMLInputElement;\n\n    await assertScreenshot('textinput/input-updated', getClip(input));\n    expect(widget.value).to.equal('Updated by attribute change');\n  });\n\n  it('shows datepicker placeholder in a form', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({\n        name: 'Date',\n        label: 'Your Date',\n        datepicker: true,\n        placeholder: 'Select a date',\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        help_text: 'Dates can be helpful',\n      })\n    );\n\n    const widget = input.shadowRoot.querySelector(\n      '.textinput'\n    ) as HTMLInputElement;\n    expect(widget.placeholder).to.equal('Select a date');\n    await assertScreenshot('textinput/date-form', getClip(input));\n  });\n\n  it('shows initialized date', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({\n        datepicker: true,\n        placeholder: 'Select a date',\n        value: '2020-04-20',\n      })\n    );\n\n    const widget = input.shadowRoot.querySelector(\n      '.textinput'\n    ) as HTMLInputElement;\n    expect(widget.value).to.equal('2020-04-20');\n\n    await waitFor(500);\n    await click('temba-textinput');\n    await waitFor(500);\n\n    const clip = getClip(input);\n\n    // account for the portaled date picker\n    clip.height += 325;\n    clip.width += 55;\n\n    await assertScreenshot('textinput/date-initialized', clip);\n  });\n\n  it('updates on date selection', async () => {\n    const input: TextInput = await createInput(\n      getInputHTML({\n        datepicker: true,\n        placeholder: 'Select a date',\n        value: '2020-04-20',\n      })\n    );\n\n    // open our picker\n    await waitFor(500);\n    await click('temba-textinput');\n    await waitFor(500);\n\n    // click on a new date\n    const newDate = document.querySelectorAll(\n      \".flatpickr-day[aria-label='April 21, 2020']\"\n    )[1] as HTMLSpanElement;\n    newDate.click();\n\n    // make sure it updated\n    const widget = input.shadowRoot.querySelector(\n      '.textinput'\n    ) as HTMLInputElement;\n    expect(widget.value).to.equal('April 21, 2020');\n  });\n});\n"]}