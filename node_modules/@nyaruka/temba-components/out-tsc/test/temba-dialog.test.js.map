{"version":3,"file":"temba-dialog.test.js","sourceRoot":"","sources":["../../test/temba-dialog.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert, expect, fixture } from '@open-wc/testing';\nimport sinon from 'sinon';\nimport { Dialog } from '../src/dialog/Dialog';\nimport { assertScreenshot, getClip } from './utils.test';\n\nconst getDialogClip = (dialog: Dialog) => {\n  return getClip(\n    dialog.shadowRoot.querySelector('.dialog-container') as HTMLElement\n  );\n};\n\nconst getDialogHTML = (hideOnClick = false) => {\n  return `\n    <temba-dialog header=\"Hello Dialog\" ${hideOnClick ? 'hideOnClick' : ''}>\n      <input name=\"comment\" type=\"text\" style=\"margin: 10px\"/>\n    </temba-dialog>\n  `;\n};\n\nconst open = async (dialog: Dialog) => {\n  const clock = sinon.useFakeTimers();\n  dialog.open = true;\n\n  await dialog.updateComplete;\n\n  // our dialog will animate onto the screen\n  clock.tick(400);\n  await dialog.updateComplete;\n\n  // gain focus for first text input\n  clock.tick(100);\n  await dialog.updateComplete;\n\n  clock.restore();\n};\n\nconst close = async (dialog: Dialog) => {\n  const clock = sinon.useFakeTimers();\n  dialog.open = false;\n  await dialog.updateComplete;\n\n  // tick forward for close to complete\n  clock.tick(400);\n\n  clock.restore();\n};\n\ndescribe('temba-dialog', () => {\n  it('can be created', async () => {\n    const dialog: Dialog = await fixture(getDialogHTML());\n    assert.instanceOf(dialog, Dialog);\n  });\n\n  it('can be opened', async () => {\n    const dialog: Dialog = await fixture(getDialogHTML());\n    await open(dialog);\n    expect(dialog.ready).to.equal(true);\n  });\n\n  it('can be closed by attribute', async () => {\n    const dialog: Dialog = await fixture(getDialogHTML());\n    await open(dialog);\n    expect(dialog.ready).to.equal(true);\n    dialog.open = false;\n  });\n\n  it('can be canceled', async () => {\n    const dialog: Dialog = await fixture(getDialogHTML());\n    await open(dialog);\n    expect(dialog.ready).to.equal(true);\n\n    dialog.getCancelButton().click();\n    expect(dialog.open).to.equal(false);\n  });\n\n  it('restricts and restores background scrolling', async () => {\n    const dialog: Dialog = await fixture(getDialogHTML());\n    await open(dialog);\n    const body = document.querySelector('body');\n    expect(body.style.position).to.equal('fixed');\n\n    await close(dialog);\n    dialog.getCancelButton().click();\n    await dialog.updateComplete;\n    expect(body.style.position).to.equal('');\n  });\n\n  it('focuses the first text input', async () => {\n    const dialog: Dialog = await fixture(getDialogHTML());\n    await open(dialog);\n\n    const input = dialog.querySelector('input');\n    expect(document.activeElement).to.equal(input);\n    await assertScreenshot('dialog/focused', getDialogClip(dialog));\n  });\n\n  it('hides on click', async () => {\n    const dialog: Dialog = await fixture(getDialogHTML(true));\n    await open(dialog);\n\n    const mask: HTMLDivElement =\n      dialog.shadowRoot.querySelector('#dialog-mask');\n    mask.click();\n\n    await dialog.updateComplete;\n    expect(dialog.open).to.equal(false);\n  });\n\n  it('hides on escape', async () => {\n    const dialog: Dialog = await fixture(getDialogHTML(true));\n    await open(dialog);\n    expect(dialog.open).to.equal(true);\n\n    // simulate the escape key\n    const element = dialog.shadowRoot.querySelector('.dialog-container');\n    element.dispatchEvent(new KeyboardEvent('keyup', { key: 'Escape' }));\n    expect(dialog.open).to.equal(false);\n  });\n});\n"]}